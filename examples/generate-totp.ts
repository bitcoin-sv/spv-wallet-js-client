import { SpvWalletClient } from '../dist/typescript-npm-package.cjs.js';
import {Contact} from "@bsv/spv-wallet-js-client";

export const TOTP_DIGITS = 4;
export const TOTP_PERIOD = 1200;
export const server = 'http://localhost:3003';

export const aliceXPriv =
  'xprv9s21ZrQH143K2jMwweKF33hFDDvwxEooDtXbZ7mGTJQfmSs8aD77ThuYDsfNrgBAbHr9Yx8FrPaukMLHpxFUyyvBuzAJBMpd4a2xFxr6qts';

export const bobXPriv =
  'xprv9s21ZrQH143K3DkTDsWwvUb3pwgKoYGp9hxYe2coqZz3pvE1kQfe1dQLdcN82XSeLmw1nGpMZLnXZktf9hFJTu9NRLBpQnGHwYpo4SmszZY';

// Both can be obtained from paymail capabilities
export const alicePKI = '026b0be5e871e7669ab5de96d0b8f0525d7845acfbf3c17c0b6d2ac9527084d982';
export const bobPKI = '02173eb07c1ebbec295c069861f1bd672f916a8e3668a75c971ab6457b5bfc0df9';

export const mockAliceContact = {
  pubKey: alicePKI,
  createdAt: new Date(),
  fullName: 'Alice Smith',
  id: 'e09d80ab-1f22-403d-8a9d-e350b96fbde9',
  status: 'not confirmed',
  paymail: 'alice@example.com',
} as const;

export const mockBobContact = {
  pubKey: bobPKI,
  createdAt: new Date(),
  fullName: 'Bob Smith',
  id: 'bc94125f-4851-4e14-be1e-1cb1bf617a72',
  status: 'not confirmed',
  paymail: 'bob@example.com',
} as const;

const aliceClient = new SpvWalletClient(server, {
  xPriv: aliceXPriv,
});

const bobClient = new SpvWalletClient(server, {
  xPriv: bobXPriv,
});

console.log('=== Initial Setup ===');
console.log('Alice xPriv:', aliceXPriv);
console.log('Bob xPriv:', bobXPriv);
console.log('Alice PKI:', alicePKI);
console.log('Bob PKI:', bobPKI);

console.log('\n=== TOTP Parameters ===');
console.log('Digits:', TOTP_DIGITS);
console.log('Period:', TOTP_PERIOD);

console.log('\n=== Alice verifying Bob ===');
const aliceTotpForBob = aliceClient.GenerateTotpForContact(
  mockBobContact,
  TOTP_PERIOD,
  TOTP_DIGITS
);
console.log('TOTP generated by Alice for Bob:', aliceTotpForBob);

const isBobValidForAlice = bobClient.ValidateTotpForContact(
  mockBobContact, // Bob's contact info (contains his public key)
  aliceTotpForBob,
  mockAliceContact.paymail, // Alice's paymail as she generated the TOTP
  TOTP_PERIOD,
  TOTP_DIGITS
);
console.log('Is Bob valid for Alice?', isBobValidForAlice);

console.log('\n=== Bob verifying Alice ===');
const bobTotpForAlice = bobClient.GenerateTotpForContact(
  mockAliceContact,
  TOTP_PERIOD,
  TOTP_DIGITS
);
console.log('TOTP generated by Bob for Alice:', bobTotpForAlice);

const isAliceValidForBob = aliceClient.ValidateTotpForContact(
  mockAliceContact, // Alice's contact info (contains her public key)
  bobTotpForAlice,
  mockBobContact.paymail, // Bob's paymail as he generated the TOTP
  TOTP_PERIOD,
  TOTP_DIGITS
);
console.log('Is Alice valid for Bob?', isAliceValidForBob);

// Final verification check (both should be valid for each other in this happy path example)
const isFullyVerified = isBobValidForAlice && isAliceValidForBob;
console.log('\n=== Final Verification ===');
console.log('Is fully verified:', isFullyVerified);
